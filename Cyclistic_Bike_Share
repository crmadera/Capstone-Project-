###Divvy_Exercise_Full_Year_Analysis ###

#STEP 1:Collecting The Data
# Always check your working directory and change it to the file you want to work on 
#go to session on the top of your screen and select the folder/file you want to work on 

getwd()              #to identify the directory 
setwd("/Users/claudia/Desktop/csvfiles ")
dir()          #check the directory 


#First you have to install these files 
install.packages("tidyverse")
install.packages("readr")
install.packages("dplyr")
install.packages("janitor")



#Load the files 
library(readr)
library(dplyr)
library(tidyverse)
library(janitor)


#import your .csv file to your Global Environment 
#Import file Q1
#Import file Q2
#Import file Q3
#Import file Q4


Q1 <- read_csv("Divvy_Trips_2020_Q1.csv")
Q2 <- read_csv("Divvy_Trips_2019_Q2.csv")
Q3 <- read_csv("Divvy_Trips_2019_Q3.csv")
Q4 <- read_csv("Divvy_Trips_2019_Q4.csv")

#get the names of the columns of a data frame
colnames(Q1)
colnames(Q2)
colnames(Q3)
colnames(Q4)

#set the names of the columns of a data frame.
colnames(Q1) <- c("trip_id","bike_id","start_time","end_time",
                 "from_station_name","from_station_id","to_station_name",
                 "to_station_id","start_lat","start_lng","end_lat",
                "end_lng", "user_type")
        

colnames(Q2) <- c("trip_id","start_time","end_time","bike_id","trip_duration",
                 "from_station_id", "from_station_name","to_station_id","to_station_name",
                 "user_type","gender","birth_year")
        

colnames(Q3) <- c("trip_id","start_time","end_time","bike_id","trip_duration",
                  "from_station_id","from_station_name","to_station_id","to_station_name",
                  "user_type","gender","birth_year")

colnames(Q4) <- c("trip_id","start_time","end_time","bike_id","trip_duration",
                  "from_station_id","from_station_name","to_station_id","to_station_name",
                  "user_type","gender","birth_year")




#STEP 2: Combining data and making sure it's consistent 
# Check the contents of each data frame and the format for each column
str(Q1)
str(Q2)
str(Q3)
str(Q4)

#Converting the Format for these three files so they can slack correctly 
Q2<-  mutate(Q2, trip_id = as.character(trip_id),
                   bike_id = as.character(bike_id))

Q3<-  mutate(Q3, trip_id = as.character(trip_id),
             bike_id = as.character(bike_id))

Q4<-  mutate(Q4, trip_id = as.character(trip_id),
             bike_id = as.character(bike_id))

##Binding all the data frames together into a single data frame.
bike_rides <- bind_rows(Q1,Q2,Q3,Q4)

#Removing columns to make the data more consistent 
bike_rides <- bike_rides %>%  
        select(-c("start_lat", "start_lng", "end_lat", "end_lng", "birth_year", "gender","trip_duration"))


#Step 3: Cleaning and Adding Data 

## they were 4 different names in the user_type column, so I consolidate to two names
bike_rides <-  bike_rides %>% 
        mutate(user_type = recode(user_type
                                      ,"Subscriber" = "member"
                                      ,"Customer" = "casual"))

#Checking if it was properly reassigned 
table(bike_rides$user_type)

#adding columns that list the date, month, day, and year 
bike_rides$date <- as.Date(bike_rides$start_time, format = "%y/%m/%d")

bike_rides$month <- format(as.Date(bike_rides$date), "%m")

bike_rides$day <- format(as.Date(bike_rides$date), "%d")

bike_rides$year <- format(as.Date(bike_rides$date), "%Y")

bike_rides$day_of_week<- format(as.Date(bike_rides$date), "%A")

bike_rides$ride_length <- difftime(bike_rides$end_time,bike_rides$start_time)

#checking the data 
str(bike_rides)

#checking to see if ride length is numeric 
is.factor(bike_rides$ride_length) 

#Converting ride length to numeric 

bike_rides$ride_length <- as.numeric(as.character(bike_rides$ride_length))
                is.numeric(bike_rides$ride_length)




#remove empty columns and rows from the single data frame  

bike_rides<- remove_empty(bike_rides, which= c("cols"))

bike_rides <- remove_empty(bike_rides, which = c("rows"))

bike_rides <- na.omit(bike_rides)

#removing duplicates in the data frame 
distinct(bike_rides)



#Step 4 analyzing 
#create a new data frame so we won't change the original data frame 
bike_rides_v2 <- bike_rides[!(bike_rides$from_station_name == "HQ QR" | bike_rides$ride_length<0),]


#average 
mean(bike_rides_v2$ride_length) 
#the midpoint number 
median(bike_rides_v2$ride_length) 
#longest ride
max(bike_rides_v2$ride_length) 
#shortest ride
min(bike_rides_v2$ride_length) 

summary(bike_rides_v2$ride_length)

#comparing members and casuals

aggregate(bike_rides_v2$ride_length ~ bike_rides_v2$user_type, FUN = mean)
aggregate(bike_rides_v2$ride_length ~ bike_rides_v2$user_type, FUN = median)
aggregate(bike_rides_v2$ride_length ~ bike_rides_v2$user_type, FUN = max)
aggregate(bike_rides_v2$ride_length ~ bike_rides_v2$user_type, FUN = min)

#average by each day 
aggregate(bike_rides_v2$ride_length ~ bike_rides_v2$user_type + bike_rides_v2$day_of_week, FUN = mean)

#making the day of the week in order 
bike_rides_v2$day_of_week <- ordered(bike_rides_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# analyze ridership data by type and weekday
bike_rides_v2 %>% 
        mutate(weekday = wday(start_time, label = TRUE)) %>%  #creates weekday field using wday()
        group_by(user_type, weekday) %>%  #groups by usertype and weekday
        summarise(number_of_rides = n()							#calculates the number of rides and average duration 
                  ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
        arrange(user_type, weekday)	

#visualize 
bike_rides_v2 %>%
        mutate(weekday = wday(start_time, label = TRUE)) %>%
        group_by(weekday, user_type) %>%
        summarise(number_of_rides = n(),
        average_duration = mean(ride_length)) %>% 
        ggplot(aes(x = weekday, y = number_of_rides, fill = user_type)) +
        geom_col(position = "dodge") +
        labs(title = "Ridership by weekday and type", x = "Weekday", y = "Number of rides", fill = "Type")





#visualize the number of rides 
bike_rides_v2%>% 
        mutate(weekday = wday(start_time, label = TRUE)) %>% 
        group_by(user_type, weekday) %>% 
        summarise(number_of_rides = n()
                  ,average_duration = mean(ride_length)) %>% 
        arrange(user_type, weekday)  %>% 
        ggplot(aes(x = weekday, y = number_of_rides, fill = user_type)) +
        geom_col(position = "dodge")

#visualize the average duration 

bike_rides_v2 %>%
        mutate(weekday = wday(start_time, label = TRUE)) %>%
        group_by(user_type, weekday) %>%
        summarise(number_of_rides = n()
                  ,average_duration = mean(ride_length)) %>%
        arrange(user_type, weekday)  %>%
        ggplot(aes(x = weekday, y = average_duration, fill = user_type)) +
        geom_col(position = "dodge") +
        scale_fill_manual(values = c("orange", "red")) #change fill colors to orange and red






#Step 5: Exporting the file 

###Save file 
save(bike_rides_v2, file = "bike_rides_v2.RData")
write.csv(bike_rides_v2, file = "bike_rides_v2.csv")





